// SPDX-License-Identifier: GPLv3
pragma solidity 0.8.15;

import "@openzeppelin/contracts/utils/Base64.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

interface PangolinStakingPositions {
    struct Position {
        uint96 balance;
        uint160 entryTimes;
        uint160 previousValues;
        uint48 lastUpdate;
        uint48 lastDevaluation;
        uint256 idealPosition;
        uint256 rewardPerValue;
    }

    function positionPendingRewards(uint256 positionId) external view returns (uint256);

    function positionRewardRate(uint256 positionId) external view returns (uint256);

    function positions(uint256 positionId) external view returns (Position memory);

    function ownerOf(uint256 positionId) external view returns (address);

    function sumOfEntryTimes() external view returns (uint256);

    function totalStaked() external view returns (uint256);

    function rewardRate() external view returns (uint256);
}

contract TokenMetadata {
    using Strings for uint256;

    string private constant DESCRIPTION =
        "This NFT perpetually receives share from the revenue generated by Pangolin. The share of the position is positively correlated to its staked balance and staking duration.";
    string private constant EXTERNAL_URL = "https://app.pangolin.exchange/#/stake/0";

    function tokenURI(PangolinStakingPositions pangolinStakingPositions, uint256 positionId)
        internal
        view
        returns (string memory)
    {
        PangolinStakingPositions.Position memory position = pangolinStakingPositions.positions(
            positionId
        );
        uint256 positionBalance = position.balance;
        uint256 positionEntryTimes = position.entryTimes;
        uint256 totalStaked = pangolinStakingPositions.totalStaked();
        uint256 sumOfEntryTimes = pangolinStakingPositions.sumOfEntryTimes();
        uint256 rewardRate = pangolinStakingPositions.rewardRate();
        uint256 positionRewardRate = pangolinStakingPositions.positionRewardRate(positionId);
        uint256 positionPendingRewards = pangolinStakingPositions.positionPendingRewards(
            positionId
        );
        address positionOwner = pangolinStakingPositions.ownerOf(positionId);

        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked(
                        '{"name":"Pangolin Staking Position #',
                        positionId.toString(),
                        '","description":"',
                        DESCRIPTION,
                        '","external_url":"',
                        EXTERNAL_URL,
                        '"}\n'
                    )
                )
            )
        );

        return string(abi.encodePacked("data:application/json;base64,", json));
    }
}
